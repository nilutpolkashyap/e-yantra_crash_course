# -*- coding: utf-8 -*-
"""pytorch_fashion_mnist_classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10OYWTVxYlvcODBX1k3BxC0JiFveuKrbE
"""

import torch
from torch import nn

from torch.utils.data import DataLoader
# DataLoader wraps an iterable around the Dataset

from torchvision import datasets
# torchvision.datasets module contains Dataset objects for many real-world vision data like CIFAR, COCO

from torchvision.transforms import ToTensor, Lambda, Compose

import matplotlib.pyplot as plt

device = "cuda" if torch.cuda.is_available() else "cpu"
print("Using {} device".format(device))

# Download training data from open datasets.
training_data = datasets.FashionMNIST(
    root="data",            # root is the path where the train/test data is stored
    train=True,             # train specifies training or test dataset
    download=True,          # download=True downloads the data from the internet if it’s not available at root
    transform=ToTensor(),   # transform and target_transform specify the feature and label transformations
)
# ToTensor() works for the image, whose elements are in range 0 to 255. The entire array is converted to torch tensor 
# and then divided by 255. This is how it is forces the network to be between 0 and 1.

training_data

labels_map = {
    0: "T-Shirt",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle Boot",
}

figure = plt.figure(figsize=(8, 8))
cols, rows = 3, 3
for i in range(1, cols * rows + 1):
    sample_idx = torch.randint(len(training_data), size=(1,)).item()
    img, label = training_data[sample_idx]
    figure.add_subplot(rows, cols, i)
    plt.title(labels_map[label])
    plt.axis("off")
    plt.imshow(img.squeeze(), cmap="gray")
plt.show()

''' '''  ''' '''# Download test data from open datasets.
test_data = datasets.FashionMNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor(),
)

test_data

batch_size  = 64
# define a batch size of 64, i.e. each element in the dataloader iterable will return a batch of 64 features and labels.

#create label loaders
# We pass the Dataset as an argument to DataLoader. This wraps an iterable over our dataset, and supports automatic batching, 
# sampling, shuffling and multiprocess data loading.
train_dataloader = DataLoader(training_data, batch_size=batch_size, shuffle=True)
test_dataloader = DataLoader(test_data, batch_size=batch_size, shuffle=True)

# Because we specified shuffle=True, after we iterate over all batches the data is shuffled

# We have loaded that dataset into the DataLoader and can iterate through the dataset as needed. 
# Each iteration below returns a batch of train_features and train_labels (containing batch_size=64 features and labels respectively)
train_features, train_labels = next(iter(train_dataloader))
print(f"Feature batch shape: {train_features.size()}")
print(f"Labels batch shape: {train_labels.size()}")
img = train_features[0].squeeze()
label = train_labels[0]
plt.imshow(img, cmap="gray")
plt.show()
print(f"Label: {label}")

for X, y in train_dataloader:
  print("Shape of X [N, C, H, W] : ", X.shape)
  print("Shape of y : ", y.shape)
  break

for X, y in test_dataloader:
  print("Shape of X [N, C, H, W] : ", X.shape)
  print("Shape of y : ", y.shape)
  break

# Define model
# To define a neural network in PyTorch, we create a class that inherits from nn.Module.
class NeuralNetwork(nn.Module):
    # We define the layers of the network in the __init__ function.
    def __init__(self):
        super(NeuralNetwork, self).__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10)
        )
    # specify how data will pass through the network in the forward function.
    def forward(self, x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits

model = NeuralNetwork().to(device)
# To accelerate operations in the neural network, we move it to the GPU if available.
print(model)

# To train a model, we need a loss function and an optimizer.
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)

# In a single training loop, the model makes predictions on the training dataset (fed to it in batches), and 
# backpropagates the prediction error to adjust the model’s parameters.
def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model.train()
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch % 100 == 0:
            loss, current = loss.item(), batch * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")

# We also check the model’s performance against the test dataset to ensure it is learning
def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

epochs = 5
for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)
print("Done!")

# save a model is to serialize the internal state dictionary (containing the model parameters).
torch.save(model.state_dict(), "model.pth")
print("Saved PyTorch Model State to model.pth")

# loading a model includes re-creating the model structure and loading the state dictionary into it.
model = NeuralNetwork()
model.load_state_dict(torch.load("model.pth"))

classes = [
    "T-shirt/top",
    "Trouser",
    "Pullover",
    "Dress",
    "Coat",
    "Sandal",
    "Shirt",
    "Sneaker",
    "Bag",
    "Ankle boot",
]

model.eval()
x, y = test_data[100][0], test_data[100][1]
with torch.no_grad():
    pred = model(x)
    predicted, actual = classes[pred[0].argmax(0)], classes[y]
    print(f'Predicted: "{predicted}", Actual: "{actual}"')

